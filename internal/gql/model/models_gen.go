// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type CategoryCreateResult interface {
	IsCategoryCreateResult()
}

type CategoryGetAllResult interface {
	IsCategoryGetAllResult()
}

type CreateColorResult interface {
	IsCreateColorResult()
}

type GetAllColorResult interface {
	IsGetAllColorResult()
}

type GetAllProductResult interface {
	IsGetAllProductResult()
}

type GetAllSizeResult interface {
	IsGetAllSizeResult()
}

type LoginResult interface {
	IsLoginResult()
}

type ProblemInterface interface {
	IsProblemInterface()
	GetMessage() string
}

type ProductCreateResult interface {
	IsProductCreateResult()
}

type RegistrationsResult interface {
	IsRegistrationsResult()
}

type SizeCreateResult interface {
	IsSizeCreateResult()
}

type VersionInterface interface {
	IsVersionInterface()
	GetVersion() uint
}

type AuthMutation struct {
	Login        LoginResult         `json:"login"`
	Registration RegistrationsResult `json:"registration"`
}

type Category struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Slug        string    `json:"slug"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	Description string    `json:"description"`
	Version     uint      `json:"version"`
}

func (Category) IsVersionInterface()   {}
func (this Category) GetVersion() uint { return this.Version }

type CategoryCreateOk struct {
	ID uuid.UUID `json:"id"`
}

func (CategoryCreateOk) IsCategoryCreateResult() {}

type CategoryGetAllOk struct {
	Category []*Category `json:"category"`
}

func (CategoryGetAllOk) IsCategoryGetAllResult() {}

type CategoryMutation struct {
	CreateCategory CategoryCreateResult `json:"createCategory"`
}

type CategoryNotFoundProblem struct {
	Message string `json:"message"`
}

func (CategoryNotFoundProblem) IsProblemInterface()     {}
func (this CategoryNotFoundProblem) GetMessage() string { return this.Message }

func (CategoryNotFoundProblem) IsCategoryCreateResult() {}

func (CategoryNotFoundProblem) IsCategoryGetAllResult() {}

type CategoryQuery struct {
	GetAllCategory CategoryGetAllResult `json:"getAllCategory"`
}

type Color struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Slug         string    `json:"slug"`
	CSSVariables string    `json:"css_variables"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

type ColorMutation struct {
	CreateColor CreateColorResult `json:"createColor"`
}

type ColorQuery struct {
	GetAllColors GetAllColorResult `json:"getAllColors"`
}

type CreateCategoryInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type CreateColorInput struct {
	Name         string `json:"name"`
	CSSVariables string `json:"cssVariables"`
}

type CreateColorOk struct {
	Ok uuid.UUID `json:"ok"`
}

func (CreateColorOk) IsCreateColorResult() {}

type CreateProductInput struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Price       int       `json:"price"`
	CategoryID  uuid.UUID `json:"categoryId"`
	Images      []string  `json:"images"`
}

type GetAllColorOk struct {
	Colors []*Color `json:"colors"`
}

func (GetAllColorOk) IsGetAllColorResult() {}

type GetAllProductsOk struct {
	Products   []*Product `json:"products"`
	TotalCount uint       `json:"totalCount"`
}

func (GetAllProductsOk) IsGetAllProductResult() {}

type GetAllSizeOk struct {
	Sizes []*Size `json:"sizes"`
}

func (GetAllSizeOk) IsGetAllSizeResult() {}

type InternalErrorProblem struct {
	Message string `json:"message"`
}

func (InternalErrorProblem) IsLoginResult() {}

func (InternalErrorProblem) IsRegistrationsResult() {}

func (InternalErrorProblem) IsCategoryCreateResult() {}

func (InternalErrorProblem) IsCategoryGetAllResult() {}

func (InternalErrorProblem) IsCreateColorResult() {}

func (InternalErrorProblem) IsGetAllColorResult() {}

func (InternalErrorProblem) IsProblemInterface()     {}
func (this InternalErrorProblem) GetMessage() string { return this.Message }

func (InternalErrorProblem) IsProductCreateResult() {}

func (InternalErrorProblem) IsGetAllProductResult() {}

func (InternalErrorProblem) IsSizeCreateResult() {}

func (InternalErrorProblem) IsGetAllSizeResult() {}

type InvalidSortRankProblem struct {
	Message string `json:"message"`
}

func (InvalidSortRankProblem) IsProblemInterface()     {}
func (this InvalidSortRankProblem) GetMessage() string { return this.Message }

type LoginInput struct {
	Phone    string `json:"phone"`
	Password string `json:"password"`
}

type LoginResultOk struct {
	User *User `json:"user"`
}

func (LoginResultOk) IsLoginResult() {}

type Mutation struct {
}

type Product struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Price       int       `json:"price"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	Images      []string  `json:"images"`
	CategoryID  uuid.UUID `json:"category_id"`
	Description string    `json:"description"`
	Version     uint      `json:"version"`
}

type ProductCreateOk struct {
	ID uuid.UUID `json:"id"`
}

func (ProductCreateOk) IsProductCreateResult() {}

type ProductMutation struct {
	CreateProduct ProductCreateResult `json:"createProduct"`
}

type ProductNotFoundProblem struct {
	Message string `json:"message"`
}

func (ProductNotFoundProblem) IsProblemInterface()     {}
func (this ProductNotFoundProblem) GetMessage() string { return this.Message }

func (ProductNotFoundProblem) IsProductCreateResult() {}

type ProductQuery struct {
	GetAllProduct GetAllProductResult `json:"getAllProduct"`
}

type Query struct {
}

type RegistrationsInput struct {
	Phone    string `json:"phone"`
	Password string `json:"password"`
	Email    string `json:"email"`
	Role     Role   `json:"role"`
	Name     string `json:"name"`
}

type RegistrationsResultOk struct {
	User *User `json:"user"`
}

func (RegistrationsResultOk) IsRegistrationsResult() {}

type Size struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Slug      string    `json:"slug"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type SizeCreateInput struct {
	Name string `json:"name"`
}

type SizeCreateOk struct {
	Ok uuid.UUID `json:"ok"`
}

func (SizeCreateOk) IsSizeCreateResult() {}

type SizeMutation struct {
	CreateSize SizeCreateResult `json:"createSize"`
}

type SizeQuery struct {
	GetAllSizes GetAllSizeResult `json:"getAllSizes"`
}

type SortRankInput struct {
	Prev string `json:"prev"`
	Next string `json:"next"`
}

type UnauthorizedProblem struct {
	Message string `json:"message"`
}

func (UnauthorizedProblem) IsCategoryCreateResult() {}

func (UnauthorizedProblem) IsProblemInterface()     {}
func (this UnauthorizedProblem) GetMessage() string { return this.Message }

func (UnauthorizedProblem) IsProductCreateResult() {}

type User struct {
	ID         uuid.UUID `json:"id"`
	Name       string    `json:"name"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	Phone      string    `json:"phone"`
	Email      string    `json:"email"`
	Password   string    `json:"password"`
	AvatarPath string    `json:"avatar_path"`
	Role       Role      `json:"role"`
}

type VersionMismatchProblem struct {
	Message string `json:"message"`
}

func (VersionMismatchProblem) IsProblemInterface()     {}
func (this VersionMismatchProblem) GetMessage() string { return this.Message }

type ArticleBlockFindSortEnum string

const (
	ArticleBlockFindSortEnumCreatedAtAsc  ArticleBlockFindSortEnum = "CREATED_AT_ASC"
	ArticleBlockFindSortEnumCreatedAtDesc ArticleBlockFindSortEnum = "CREATED_AT_DESC"
	ArticleBlockFindSortEnumSortRankAsc   ArticleBlockFindSortEnum = "SORT_RANK_ASC"
	ArticleBlockFindSortEnumSortRankDesc  ArticleBlockFindSortEnum = "SORT_RANK_DESC"
)

var AllArticleBlockFindSortEnum = []ArticleBlockFindSortEnum{
	ArticleBlockFindSortEnumCreatedAtAsc,
	ArticleBlockFindSortEnumCreatedAtDesc,
	ArticleBlockFindSortEnumSortRankAsc,
	ArticleBlockFindSortEnumSortRankDesc,
}

func (e ArticleBlockFindSortEnum) IsValid() bool {
	switch e {
	case ArticleBlockFindSortEnumCreatedAtAsc, ArticleBlockFindSortEnumCreatedAtDesc, ArticleBlockFindSortEnumSortRankAsc, ArticleBlockFindSortEnumSortRankDesc:
		return true
	}
	return false
}

func (e ArticleBlockFindSortEnum) String() string {
	return string(e)
}

func (e *ArticleBlockFindSortEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ArticleBlockFindSortEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ArticleBlockFindSortEnum", str)
	}
	return nil
}

func (e ArticleBlockFindSortEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
	RoleGuest Role = "GUEST"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
	RoleGuest,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser, RoleGuest:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
