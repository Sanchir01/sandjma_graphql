// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type ProblemInterface interface {
	IsProblemInterface()
	GetMessage() string
}

type ProductCreateResult interface {
	IsProductCreateResult()
}

type ProductFindResult interface {
	IsProductFindResult()
}

type ProductInterface interface {
	IsProductInterface()
	GetID() string
	GetName() string
	GetPrice() string
	GetCratedAt() string
	GetUpdatedAt() string
	GetCategoryID() string
}

type TotalCountResolvingResult interface {
	IsTotalCountResolvingResult()
}

type CreateProductInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type InternalErrorProblem struct {
	Message string `json:"message"`
}

func (InternalErrorProblem) IsProblemInterface()     {}
func (this InternalErrorProblem) GetMessage() string { return this.Message }

func (InternalErrorProblem) IsProductCreateResult() {}

func (InternalErrorProblem) IsTotalCountResolvingResult() {}

func (InternalErrorProblem) IsProductFindResult() {}

type InvalidSortRankProblem struct {
	Message string `json:"message"`
}

func (InvalidSortRankProblem) IsProblemInterface()     {}
func (this InvalidSortRankProblem) GetMessage() string { return this.Message }

func (InvalidSortRankProblem) IsProductCreateResult() {}

type Mutation struct {
}

type ProductBlockList struct {
	Items      []ProductInterface        `json:"items"`
	TotalCount TotalCountResolvingResult `json:"totalCount"`
}

func (ProductBlockList) IsProductFindResult() {}

type ProductCreateOk struct {
	Product ProductInterface `json:"product,omitempty"`
}

func (ProductCreateOk) IsProductCreateResult() {}

type ProductMutation struct {
	CreateProduct ProductCreateResult `json:"createProduct"`
}

type ProductNotFoundProblem struct {
	Message string `json:"message"`
}

func (ProductNotFoundProblem) IsProblemInterface()     {}
func (this ProductNotFoundProblem) GetMessage() string { return this.Message }

func (ProductNotFoundProblem) IsProductCreateResult() {}

type ProductsQuery struct {
	GetAllProducts []ProductFindResult `json:"getAllProducts"`
}

type Query struct {
}

type TotalCount struct {
	Value string `json:"value"`
}

func (TotalCount) IsTotalCountResolvingResult() {}
