package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	userFeature "github.com/Sanchir01/sandjma_graphql/internal/feature/user"
	"github.com/Sanchir01/sandjma_graphql/internal/gql/model"
	"github.com/Sanchir01/sandjma_graphql/pkg/lib/api/response"
)

// Registration is the resolver for the registration field.
func (r *authMutationResolver) Registration(ctx context.Context, obj *model.AuthMutation, input *model.RegistrationsInput) (model.RegistrationsResult, error) {
	r.Logger.Warn("registration input", input)
	tr, err := r.DB.Beginx()

	if err != nil {
		r.Logger.Error("error for rollback transaction", err.Error())
		return response.NewInternalErrorProblem("error for initiate transaction"), nil
	}
	userPhone, _ := r.UserStr.GetUserByPhone(ctx, tr, input.Phone)

	if userPhone != nil {
		r.Logger.Warn("user phone", userPhone)
		return response.NewInternalErrorProblem("User with this phone already exists"), nil
	}
	userEmail, _ := r.UserStr.GetUserByEmail(ctx, tr, input.Email)
	if userEmail != nil {
		r.Logger.Warn("user email", userEmail)
		return response.NewInternalErrorProblem("User with this email already exists"), nil
	}

	newUser, err := r.UserStr.CreateUser(ctx, tr, input)
	if err != nil {
		r.Logger.Warn("user created SUPER", err.Error())
		return response.NewInternalErrorProblem("Error for creating new user"), nil
	}
	tokens, err := userFeature.GenerateJwtToken(newUser.ID, newUser.Role)
	if err != nil {
		r.Logger.Warn("errors generating jwt", err)
	}
	r.Logger.Warn("Tokens", tokens)
	if err = tr.Rollback(); err != nil {
		r.Logger.Error("error for rollback transaction", err.Error())
		return response.NewInternalErrorProblem("error for rollback"), nil
	}
	return nil, nil
}
