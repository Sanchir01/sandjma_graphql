package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	featureProduct "github.com/Sanchir01/sandjma_graphql/internal/feature/product"
	"github.com/Sanchir01/sandjma_graphql/internal/gql/model"
	"github.com/Sanchir01/sandjma_graphql/pkg/lib/api/response"
)

// GetAllProduct is the resolver for the getAllProduct field.
func (r *productQueryResolver) GetAllProduct(ctx context.Context, obj *model.ProductQuery, sort model.ArticleBlockFindSortEnum) (model.GetAllProductResult, error) {
	products, err := r.ProductStr.GetAllProducts(ctx)
	if err != nil {
		return response.NewInternalErrorProblem("error for get all products db"), nil
	}
	req, err := r.GrpcAuthlient.IsUserPhone(ctx, "1234")

	r.Logger.Warn("req auth grpc client request", req)
	productsFetch, err := featureProduct.MapManyProductsToGqlModels(products)
	if err != nil {
		return response.NewInternalErrorProblem("error for mapping products gql"), nil
	}

	return model.GetAllProductsOk{Products: productsFetch, TotalCount: uint(len(products))}, nil
}
